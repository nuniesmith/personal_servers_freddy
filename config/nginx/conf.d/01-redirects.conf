# ================================================
# ENHANCED HTTP TO HTTPS REDIRECTS AND HEALTH CHECKS
# ================================================
# Improved version with better security, performance, and monitoring

# ================================================
# RATE LIMITING ZONES
# ================================================
# Define rate limiting zones for different endpoints
limit_req_zone $binary_remote_addr zone=redirect:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=health_internal:10m rate=30r/s;
limit_req_zone $binary_remote_addr zone=acme:10m rate=5r/s;

# ================================================
# HTTP TO HTTPS REDIRECT (All domains)
# ================================================
server {
    listen 80;
    listen [::]:80;
    server_name 7gram.xyz *.7gram.xyz;
    
    # Include maps for enhanced functionality
#     include /etc/nginx/includes/maps.conf;
    
    # Enhanced logging for HTTP traffic
    access_log /var/log/nginx/http-redirect.log main if=$should_log;
    error_log /var/log/nginx/http-redirect-error.log;
    
    # Basic security headers (even for HTTP)
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header Referrer-Policy "no-referrer" always;
    
    # ================================================
    # LET'S ENCRYPT ACME CHALLENGES
    # ================================================
    
    # Enhanced ACME challenge handling with rate limiting
    location /.well-known/acme-challenge/ {
        # Rate limit ACME requests
        limit_req zone=acme burst=10 nodelay;
        
        # Serve ACME challenges
        root /var/www/certbot;
        try_files $uri =404;
        
        # ACME-specific headers
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        # Enhanced logging for ACME
        access_log /var/log/nginx/acme-access.log main;
    }
    
    # ================================================
    # SPECIAL HTTP ENDPOINTS (Before redirect)
    # ================================================
    
    # Basic health check (HTTP only - for load balancers)
    location = /health-http {
        # Rate limit health checks
        limit_req zone=redirect burst=20 nodelay;
        
        add_header Content-Type "text/plain; charset=utf-8" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header X-Health-Check "http-only" always;
        
        return 200 "OK - HTTP Health Check\nTime: $time_iso8601\nServer: $hostname";
    }
    
    # Redirect info endpoint (useful for debugging)
    location = /redirect-info {
        add_header Content-Type "application/json; charset=utf-8" always;
        add_header Cache-Control "no-cache" always;
        
        return 200 '{
            "message": "This is HTTP - redirecting to HTTPS",
            "https_url": "https://$server_name$request_uri",
            "server": "$hostname",
            "timestamp": "$time_iso8601",
            "client_ip": "$remote_addr"
        }';
    }
    
    # ================================================
    # SECURITY AND REDIRECT HANDLING
    # ================================================
    
    # Block common attack patterns (even on HTTP)
    location ~* \.(env|git|svn|htaccess|htpasswd)$ {
        return 444;
    }
    
    # Block suspicious requests
    location ~* (wp-admin|wp-login|phpmyadmin|admin|login\.php) {
        return 444;
    }
    
    # ================================================
    # HTTPS REDIRECT WITH ENHANCEMENTS
    # ================================================
    
    # Redirect all other HTTP traffic to HTTPS with rate limiting
    location / {
        # Rate limit redirects to prevent abuse
        limit_req zone=redirect burst=50 nodelay;
        
        # Enhanced redirect with HSTS hint
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # Redirect to HTTPS
        return 301 https://$server_name$request_uri;
    }
}

# ================================================
# ENHANCED INTERNAL HEALTH CHECK SERVER
# ================================================
server {
    listen 127.0.0.1:80;
    listen [::1]:80;  # IPv6 localhost
    server_name localhost _;
    
    # Internal server logging
    access_log /var/log/nginx/health-internal.log main;
    error_log /var/log/nginx/health-internal-error.log;
    
    # Include maps for functionality
#     include /etc/nginx/includes/maps.conf;
    
    # ================================================
    # ERROR HANDLING
    # ================================================
    
    # Enhanced error pages
    error_page 404 /errors/404-internal.html;
    error_page 500 502 503 504 /errors/500-internal.html;
    
    # Internal error page locations
    location = /errors/404-internal.html {
        internal;
        add_header Content-Type "text/html; charset=utf-8" always;
        return 404 '<!DOCTYPE html>
<html><head><title>404 - Internal Health Check</title></head>
<body style="font-family: monospace; background: #1a1a1a; color: #00ff00; padding: 20px;">
<h1>404 - Internal Endpoint Not Found</h1>
<p>Available endpoints: /health, /status, /metrics, /info</p>
<p>Time: $time_iso8601</p>
</body></html>';
    }
    
    location = /errors/500-internal.html {
        internal;
        add_header Content-Type "text/html; charset=utf-8" always;
        return 500 '<!DOCTYPE html>
<html><head><title>500 - Internal Server Error</title></head>
<body style="font-family: monospace; background: #1a1a1a; color: #ff0000; padding: 20px;">
<h1>500 - Internal Server Error</h1>
<p>Internal health check system error</p>
<p>Time: $time_iso8601</p>
</body></html>';
    }
    
    # ================================================
    # REDIRECT PREVENTION
    # ================================================
    
    # Prevent redirects for internal health checks
    absolute_redirect off;
    port_in_redirect off;
    server_name_in_redirect off;
    
    # ================================================
    # COMPREHENSIVE HEALTH CHECK ENDPOINTS
    # ================================================
    
    # Primary health check endpoint
    location = /health {
        # Rate limit internal health checks
        limit_req zone=health_internal burst=100 nodelay;
        
        add_header Content-Type "text/plain; charset=utf-8" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Health-Check-Type "basic" always;
        
        return 200 "OK\nTime: $time_iso8601\nServer: $hostname\nPID: $nginx_pid";
    }
    
    # Legacy health check endpoint (for compatibility)
    location = /health-check-ping {
        limit_req zone=health_internal burst=100 nodelay;
        
        add_header Content-Type "text/plain; charset=utf-8" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        
        return 200 "OK";
    }
    
    # ================================================
    # ENHANCED MONITORING ENDPOINTS
    # ================================================
    
    # Detailed status endpoint
    location = /status {
        limit_req zone=health_internal burst=50 nodelay;
        
        add_header Content-Type "application/json; charset=utf-8" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        
        return 200 '{
            "status": "healthy",
            "service": "nginx",
            "hostname": "$hostname",
            "pid": "$nginx_pid",
            "version": "$nginx_version",
            "timestamp": "$time_iso8601",
            "uptime": "operational",
            "connections": {
                "active": "$connections_active",
                "reading": "$connections_reading",
                "writing": "$connections_writing",
                "waiting": "$connections_waiting"
            },
            "request": {
                "id": "$request_id",
                "time": "$request_time"
            },
            "network": {
                "client_ip": "$remote_addr",
                "server_addr": "$server_addr"
            }
        }';
    }
    
    # Metrics endpoint (Prometheus-style)
    location = /metrics {
        limit_req zone=health_internal burst=30 nodelay;
        
        add_header Content-Type "text/plain; charset=utf-8" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        
        return 200 '# HELP nginx_connections_active Active connections
# TYPE nginx_connections_active gauge
nginx_connections_active $connections_active

# HELP nginx_connections_reading Reading connections  
# TYPE nginx_connections_reading gauge
nginx_connections_reading $connections_reading

# HELP nginx_connections_writing Writing connections
# TYPE nginx_connections_writing gauge
nginx_connections_writing $connections_writing

# HELP nginx_connections_waiting Waiting connections
# TYPE nginx_connections_waiting gauge
nginx_connections_waiting $connections_waiting

# HELP nginx_request_time Request processing time
# TYPE nginx_request_time gauge
nginx_request_time $request_time

# HELP nginx_info Build information
# TYPE nginx_info gauge
nginx_info{version="$nginx_version",hostname="$hostname"} 1
';
    }
    
    # System information endpoint
    location = /info {
        limit_req zone=health_internal burst=20 nodelay;
        
        add_header Content-Type "application/json; charset=utf-8" always;
        add_header Cache-Control "public, max-age=3600" always; # 1 hour cache
        
        return 200 '{
            "nginx": {
                "version": "$nginx_version",
                "pid": "$nginx_pid",
                "hostname": "$hostname",
                "build": "7gram-optimized"
            },
            "system": {
                "timestamp": "$time_iso8601",
                "server_addr": "$server_addr",
                "server_port": "$server_port"
            },
            "features": [
                "internal_health_checks",
                "rate_limiting", 
                "enhanced_monitoring",
                "prometheus_metrics",
                "ipv6_support"
            ],
            "endpoints": {
                "health": "/health",
                "status": "/status", 
                "metrics": "/metrics",
                "info": "/info"
            }
        }';
    }
    
    # ================================================
    # NGINX STUB STATUS (Optional)
    # ================================================
    
    # Nginx stub_status module (if enabled)
    location = /nginx_status {
        limit_req zone=health_internal burst=10 nodelay;
        
        # Enable if you have --with-http_stub_status_module
        # stub_status;
        
        # Fallback if stub_status not available
        add_header Content-Type "text/plain; charset=utf-8" always;
        return 200 "Nginx Status: Active\nConnections: $connections_active\nTime: $time_iso8601";
        
        # Restrict access (already restricted to localhost)
        allow 127.0.0.1;
        allow ::1;
        deny all;
    }
    
    # ================================================
    # SECURITY AND FALLBACK
    # ================================================
    
    # Block any other requests to internal server
    location / {
        return 444;  # Close connection silently
    }
}

# ================================================
# ADDITIONAL MONITORING SERVER (Optional)
# ================================================

# Uncomment this server block if you want external health checks
# server {
#     listen 8080;
#     listen [::]:8080;
#     server_name _;
#     
#     # External health check (without auth)
#     location = /health {
#         add_header Content-Type "text/plain; charset=utf-8" always;
#         add_header Access-Control-Allow-Origin "*" always;
#         return 200 "OK";
#     }
#     
#     # Block everything else
#     location / {
#         return 444;
#     }
# }

# ================================================
# USAGE INSTRUCTIONS
# ================================================

# This configuration provides:
# 
# 1. HTTP to HTTPS redirects with rate limiting
# 2. Let's Encrypt ACME challenge support
# 3. Comprehensive internal health checks
# 4. Enhanced monitoring and metrics
# 5. Security protections for HTTP traffic
# 6. Prometheus-compatible metrics endpoint
# 
# Available endpoints:
# - http://localhost/health - Basic health check
# - http://localhost/status - Detailed JSON status
# - http://localhost/metrics - Prometheus metrics
# - http://localhost/info - System information
# 
# External (HTTP) endpoints:
# - http://7gram.xyz/health-http - Public HTTP health check
# - http://7gram.xyz/.well-known/acme-challenge/ - Let's Encrypt
# - http://7gram.xyz/* - Redirects to HTTPS

# ================================================
# MONITORING COMMANDS
# ================================================

# Test internal health checks:
# curl http://localhost/health
# curl http://localhost/status
# curl http://localhost/metrics
# 
# Test HTTP redirects:
# curl -I http://7gram.xyz/
# 
# Test ACME challenge:
# curl http://7gram.xyz/.well-known/acme-challenge/test