# ================================================
# ENHANCED MAPS CONFIGURATION FOR 7GRAM NETWORK v3.0
# ================================================
# IMPORTANT: This file must be included in the HTTP context only!
# Add to /etc/nginx/nginx.conf inside the http block:
# 
# http {
#     include /etc/nginx/includes/maps.conf;
#     include /etc/nginx/conf.d/*.conf;
# }
# 
# DO NOT include this in server blocks!

# ================================================
# WEBSOCKET AND CONNECTION HANDLING
# ================================================

# WebSocket upgrade handling - Critical for real-time features
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# Connection close handling for HTTP/1.1
map $http_connection $proxy_connection {
    default close;
    upgrade $http_connection;
}

# Enhanced WebSocket protocol detection
map $http_sec_websocket_protocol $websocket_protocol {
    default                 "";
    ~*chat                  "chat";
    ~*notification          "notification";
    ~*api                   "api";
    ~*stream                "stream";
}

# ================================================
# ENHANCED CLIENT TYPE DETECTION AND ANALYTICS
# ================================================

# Enhanced client type detection for analytics and logging (2024 update)
map $http_user_agent $client_type {
    default                 "unknown";
    
    # AI and Language Model Clients (2024 additions)
    ~*ChatGPT              "ai-chatgpt";
    ~*GPTBot               "ai-gpt";
    ~*Claude-Web           "ai-claude";
    ~*Bard                 "ai-bard";
    ~*OpenAI               "ai-openai";
    ~*Anthropic            "ai-anthropic";
    ~*LangChain            "ai-langchain";
    ~*LlamaIndex           "ai-llamaindex";
    
    # Search engine bots (enhanced)
    ~*Googlebot            "bot-google";
    ~*bingbot              "bot-bing";
    ~*slurp                "bot-yahoo";
    ~*duckduckbot          "bot-duckduckgo";
    ~*baiduspider          "bot-baidu";
    ~*yandexbot            "bot-yandex";
    ~*facebookexternalhit  "bot-facebook";
    ~*twitterbot           "bot-twitter";
    ~*linkedinbot          "bot-linkedin";
    ~*telegrambot          "bot-telegram";
    ~*whatsapp             "bot-whatsapp";
    ~*discordbot           "bot-discord";
    ~*slackbot             "bot-slack";
    ~*mastodonbot          "bot-mastodon";
    ~*bot                  "bot-other";
    ~*crawler              "bot-crawler";
    ~*spider               "bot-spider";
    ~*scraper              "bot-scraper";
    
    # API clients and tools (enhanced)
    ~*curl                 "api-curl";
    ~*wget                 "api-wget";
    ~*httpie               "api-httpie";
    ~*postman              "api-postman";
    ~*insomnia             "api-insomnia";
    ~*hoppscotch           "api-hoppscotch";
    ~*thunder              "api-thunder";
    ~*paw                  "api-paw";
    ~*python-requests      "api-python";
    ~*python-urllib        "api-python";
    ~*python-aiohttp       "api-python";
    ~*go-http-client       "api-go";
    ~*node-fetch           "api-node";
    ~*axios                "api-node";
    ~*fetch                "api-fetch";
    ~*okhttp               "api-java";
    ~*rust-reqwest         "api-rust";
    ~*dart-http            "api-dart";
    ~*swift-urlsession     "api-swift";
    
    # Mobile devices (enhanced)
    ~*Mobile               "mobile";
    ~*Android              "mobile-android";
    ~*iPhone               "mobile-iphone";
    ~*iPad                 "mobile-ipad";
    ~*iPod                 "mobile-ipod";
    ~*BlackBerry           "mobile-blackberry";
    ~*Windows.*Phone       "mobile-windows";
    ~*webOS                "mobile-webos";
    ~*Symbian              "mobile-symbian";
    ~*Opera.*Mini          "mobile-opera-mini";
    ~*UCBrowser            "mobile-uc";
    
    # Smart TV and streaming devices
    ~*SmartTV              "tv-smart";
    ~*Roku                 "tv-roku";
    ~*AppleTV              "tv-apple";
    ~*Chromecast           "tv-chromecast";
    ~*AndroidTV            "tv-android";
    ~*WebOS                "tv-webos";
    ~*Tizen                "tv-tizen";
    ~*Xbox                 "console-xbox";
    ~*PlayStation          "console-playstation";
    ~*Nintendo             "console-nintendo";
    
    # Desktop browsers (enhanced)
    ~*Chrome               "browser-chrome";
    ~*Chromium             "browser-chromium";
    ~*Firefox              "browser-firefox";
    ~*Safari               "browser-safari";
    ~*Edge                 "browser-edge";
    ~*Opera                "browser-opera";
    ~*MSIE                 "browser-ie";
    ~*Vivaldi              "browser-vivaldi";
    ~*Brave                "browser-brave";
    ~*Arc                  "browser-arc";
    ~*DuckDuckGo           "browser-duckduckgo";
    ~*Tor                  "browser-tor";
    
    # Media players and streaming clients (enhanced)
    ~*VLC                  "media-vlc";
    ~*Kodi                 "media-kodi";
    ~*XBMC                 "media-xbmc";
    ~*Plex                 "media-plex";
    ~*Emby                 "media-emby";
    ~*Jellyfin             "media-jellyfin";
    ~*MPV                  "media-mpv";
    ~*MPC                  "media-mpc";
    ~*PotPlayer            "media-potplayer";
    ~*QuickTime            "media-quicktime";
    ~*iTunes               "media-itunes";
    ~*Spotify              "media-spotify";
    ~*Netflix              "media-netflix";
    ~*YouTube              "media-youtube";
    ~*Twitch               "media-twitch";
    
    # Development and monitoring tools (enhanced)
    ~*Prometheus           "monitoring-prometheus";
    ~*Grafana              "monitoring-grafana";
    ~*Uptime               "monitoring-uptime";
    ~*Pingdom              "monitoring-pingdom";
    ~*NewRelic             "monitoring-newrelic";
    ~*Datadog              "monitoring-datadog";
    ~*Zabbix               "monitoring-zabbix";
    ~*Nagios               "monitoring-nagios";
    ~*StatusCake           "monitoring-statuscake";
    ~*UptimeRobot          "monitoring-uptimerobot";
    
    # Security scanners and penetration testing
    ~*Nessus               "security-nessus";
    ~*OpenVAS              "security-openvas";
    ~*Nikto                "security-nikto";
    ~*sqlmap               "security-sqlmap";
    ~*Nmap                 "security-nmap";
    ~*ZAP                  "security-zap";
    ~*Burp                 "security-burp";
    ~*Acunetix             "security-acunetix";
    
    # IoT and embedded devices
    ~*Arduino              "iot-arduino";
    ~*Raspberry            "iot-raspberry";
    ~*ESP32                "iot-esp32";
    ~*ESP8266              "iot-esp8266";
    ~*HomeAssistant        "iot-homeassistant";
    ~*Tasmota              "iot-tasmota";
    ~*ESPHome              "iot-esphome";
}

# Geographic region detection (enhanced with more regions)
# Uncomment if you have GeoIP module enabled
# map $geoip_country_code $client_region {
#     default "unknown";
#     US      "north-america";
#     CA      "north-america";
#     MX      "north-america";
#     GB      "europe";
#     DE      "europe";
#     FR      "europe";
#     IT      "europe";
#     ES      "europe";
#     NL      "europe";
#     SE      "europe";
#     NO      "europe";
#     JP      "asia";
#     CN      "asia";
#     KR      "asia";
#     IN      "asia";
#     SG      "asia";
#     AU      "oceania";
#     NZ      "oceania";
#     BR      "south-america";
#     AR      "south-america";
#     ZA      "africa";
#     EG      "africa";
# }

# ================================================
# ENHANCED LOGGING AND MONITORING CONTROL
# ================================================

# Enhanced logging control - Skip logging for health checks and static assets
map $request_uri $should_log {
    default                     1;
    
    # Health and monitoring endpoints
    ~*/health$                  0;
    ~*/health-check$            0;
    ~*/ping$                    0;
    ~*/status$                  0;
    ~*/metrics$                 0;
    ~*/api/health               0;
    ~*/api/status               0;
    ~*/api/metrics              0;
    ~*/.well-known/             0;  # Let's Encrypt and other well-known URIs
    
    # Static assets that clutter logs
    ~*/favicon\.ico$            0;
    ~*/apple-touch-icon.*\.png$ 0;
    ~*/robots\.txt$             0;
    ~*/sitemap\.xml$            0;
    ~*\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map|webp|avif)$ 0;
    
    # Service worker and PWA files
    ~*/sw\.js$                  0;
    ~*/service-worker\.js$      0;
    ~*/workbox-.*\.js$          0;
    ~*/manifest\.json$          0;
    ~*/manifest\.webmanifest$   0;
    
    # Security scanner noise (enhanced)
    ~*/\.env$                   0;
    ~*/\.git                    0;
    ~*/\.svn                    0;
    ~*/\.DS_Store$              0;
    ~*/wp-admin                 0;
    ~*/wp-login                 0;
    ~*/wp-config                0;
    ~*/phpmyadmin               0;
    ~*/admin/config\.php        0;
    ~*/xmlrpc\.php              0;
    ~*/config\.php              0;
    ~*/database\.sql            0;
    ~*/backup\.sql              0;
    ~*/\.htaccess               0;
    ~*/\.htpasswd               0;
    ~*/sftp-config\.json        0;
}

# Enhanced bot request logging control
map $client_type $log_bots {
    default           1;
    ~*bot-.*          0;  # Don't log most bot requests
    bot-google        1;  # But do log Google bot for SEO
    ~*security-.*     1;  # Log security scanners for monitoring
    ~*ai-.*           1;  # Log AI clients for analysis
}

# Enhanced error logging level based on client type
map $client_type $error_log_level {
    default           "error";
    ~*api-.*          "warn";         # More verbose for API clients
    ~*monitoring-.*   "info";         # Very verbose for monitoring
    ~*bot-.*          "crit";         # Less verbose for bots
    ~*security-.*     "warn";         # Monitor security scanners
    ~*ai-.*           "info";         # Monitor AI interactions
    ~*iot-.*          "warn";         # Monitor IoT devices
}

# ================================================
# ENHANCED PERFORMANCE AND CACHING CONTROL
# ================================================

# Enhanced cache control headers based on content type
map $sent_http_content_type $cache_control_header {
    default                          "no-cache, no-store, must-revalidate";
    
    # Static assets - optimized caching
    ~*text/css                       "public, max-age=86400, immutable";
    ~*application/javascript         "public, max-age=86400, immutable";
    ~*application/x-javascript       "public, max-age=86400, immutable";
    ~*text/javascript                "public, max-age=86400, immutable";
    
    # Modern image formats - very long cache
    ~*image/webp                     "public, max-age=2592000, immutable";
    ~*image/avif                     "public, max-age=2592000, immutable";
    ~*image/.*                       "public, max-age=2592000, immutable";
    ~*image/svg\+xml                 "public, max-age=2592000, immutable";
    
    # Fonts - longest cache (enhanced)
    ~*font/woff2                     "public, max-age=31536000, immutable";
    ~*font/woff                      "public, max-age=31536000, immutable";
    ~*font/.*                        "public, max-age=31536000, immutable";
    ~*application/font-.*            "public, max-age=31536000, immutable";
    
    # Documents and data (enhanced)
    ~*application/pdf                "public, max-age=86400";
    ~*application/json               "public, max-age=300";
    ~*application/xml                "public, max-age=3600";
    ~*text/xml                       "public, max-age=3600";
    ~*application/rss\+xml           "public, max-age=1800";
    ~*application/atom\+xml          "public, max-age=1800";
    
    # Video and audio - optimized caching
    ~*video/mp4                      "public, max-age=604800";
    ~*video/webm                     "public, max-age=604800";
    ~*video/.*                       "public, max-age=604800";
    ~*audio/mp3                      "public, max-age=604800";
    ~*audio/ogg                      "public, max-age=604800";
    ~*audio/.*                       "public, max-age=604800";
    
    # Application manifests and PWA files
    ~*application/manifest\+json     "public, max-age=86400";
    ~*text/cache-manifest            "no-cache";
    
    # API responses - short cache for dynamic content
    ~*application/vnd\.api\+json     "public, max-age=60";
    ~*application/hal\+json          "public, max-age=60";
}

# Enhanced compression control based on content type
map $sent_http_content_type $compression_type {
    default                          "off";
    ~*text/.*                        "on";
    ~*application/javascript         "on";
    ~*application/json               "on";
    ~*application/xml                "on";
    ~*application/rss\+xml           "on";
    ~*application/atom\+xml          "on";
    ~*image/svg\+xml                 "on";
    ~*application/vnd\.api\+json     "on";
    ~*application/hal\+json          "on";
    ~*application/ld\+json           "on";
}

# ================================================
# ENHANCED SECURITY AND ACCESS CONTROL
# ================================================

# Enhanced security headers based on server name
map $server_name $x_frame_options {
    default                          "SAMEORIGIN";
    "7gram.xyz"                      "SAMEORIGIN";
    "~*\.7gram\.xyz"                 "SAMEORIGIN";
    "auth.7gram.xyz"                 "DENY";  # Auth service should not be framed
}

map $server_name $x_content_type_options {
    default                          "nosniff";
}

map $server_name $x_xss_protection {
    default                          "1; mode=block";
}

map $server_name $referrer_policy {
    default                          "strict-origin-when-cross-origin";
    "7gram.xyz"                      "strict-origin-when-cross-origin";
    "auth.7gram.xyz"                 "no-referrer";  # Stricter for auth
}

# Enhanced Content Security Policy (2024 standards)
map $server_name $content_security_policy {
    default     "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self'; base-uri 'self'; form-action 'self';";
    
    # Dashboard gets modern PWA-friendly CSP
    "7gram.xyz" "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https: blob:; connect-src 'self' wss: https:; font-src 'self' data: https://fonts.gstatic.com; manifest-src 'self'; worker-src 'self'; frame-ancestors 'self'; base-uri 'self'; form-action 'self';";
    
    # Auth service gets maximum security CSP
    "auth.7gram.xyz" "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; upgrade-insecure-requests;";
    
    # Media services get media-optimized CSP
    "~*^(emby|jellyfin|plex)\.7gram\.xyz$" "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https: blob:; media-src 'self' https: blob:; connect-src 'self' wss: https:; font-src 'self' data:; frame-ancestors 'self'; worker-src 'self';";
    
    # AI services get AI-optimized CSP
    "~*^(ai|chat|ollama)\.7gram\.xyz$" "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https: blob:; connect-src 'self' wss: https:; font-src 'self' data:; frame-ancestors 'self'; worker-src 'self';";
}

# Enhanced HSTS duration based on service type
map $server_name $hsts_duration {
    default                          "max-age=31536000; includeSubDomains";
    "7gram.xyz"                      "max-age=63072000; includeSubDomains; preload";
    "auth.7gram.xyz"                 "max-age=63072000; includeSubDomains; preload";
    "~*^(home|pihole|dns)\.7gram\.xyz$" "max-age=63072000; includeSubDomains; preload";  # System services
}

# Enhanced rate limiting zones based on client type
map $client_type $rate_limit_zone {
    default           "normal";
    ~*bot-.*          "bot";
    ~*api-.*          "api";
    ~*monitoring-.*   "monitoring";
    ~*security-.*     "security";
    ~*ai-.*           "ai";
    ~*iot-.*          "iot";
    ~*media-.*        "media";
}

# ================================================
# ENHANCED SERVICE-SPECIFIC MAPPINGS
# ================================================

# Enhanced service category detection from server name
map $server_name $service_category {
    default                              "unknown";
    "7gram.xyz"                          "dashboard";
    "auth.7gram.xyz"                     "authentication";
    
    # Media services (enhanced)
    "~*^(emby|jellyfin|plex|abs|calibre.*|youtube|mealie|grocy|wiki|nc)\.7gram\.xyz$" "media";
    
    # AI services (enhanced)
    "~*^(ai|chat|ollama)\.7gram\.xyz$"   "ai";
    
    # Admin services (enhanced)
    "~*^(sonarr|radarr|lidarr|jackett|qbt|filebot|duplicati|.*books)\.7gram\.xyz$" "admin";
    
    # System services (enhanced)
    "~*^(home|pihole|dns)\.7gram\.xyz$"  "system";
    
    # Sync services
    "~*^sync-.*\.7gram\.xyz$"            "sync";
}

# Enhanced authentication level required based on server name
map $server_name $auth_level {
    default                              "unknown";
    "7gram.xyz"                          "none";
    "auth.7gram.xyz"                     "none";
    "nc.7gram.xyz"                       "internal";  # Nextcloud has its own auth
    
    # One factor auth (enhanced)
    "~*^(emby|jellyfin|plex|abs|calibre.*|youtube|mealie|grocy|wiki|ai|chat|ollama)\.7gram\.xyz$" "one_factor";
    
    # Two factor auth (admin services)
    "~*^(sonarr|radarr|lidarr|jackett|qbt|filebot|duplicati|.*books)\.7gram\.xyz$" "two_factor";
    
    # Admin only (system and sync services)
    "~*^(home|pihole|dns|sync-.*)\.7gram\.xyz$" "admin";
}

# Service priority for monitoring and alerting
map $server_name $service_priority {
    default                              "normal";
    "7gram.xyz"                          "critical";   # Dashboard is critical
    "auth.7gram.xyz"                     "critical";   # Auth is critical
    "~*^(home|pihole|dns)\.7gram\.xyz$"  "high";       # System services are high priority
    "~*^(emby|jellyfin|plex)\.7gram\.xyz$" "high";     # Main media services are high priority
    "~*^sync-.*\.7gram\.xyz$"            "medium";     # Sync services are medium priority
    "~*^(sonarr|radarr|lidarr)\.7gram\.xyz$" "medium"; # Automation services are medium priority
}

# Resource usage expectations (for monitoring)
map $server_name $expected_resource_usage {
    default                              "low";
    "~*^(emby|jellyfin|plex)\.7gram\.xyz$" "high";     # Media streaming is resource intensive
    "~*^(ai|chat|ollama)\.7gram\.xyz$"   "very_high";  # AI services are very resource intensive
    "~*^sync-.*\.7gram\.xyz$"            "medium";     # File sync can be medium usage
    "~*^(sonarr|radarr|lidarr)\.7gram\.xyz$" "low";    # Automation services are typically low usage
}

# ================================================
# NEW: PERFORMANCE OPTIMIZATION MAPPINGS
# ================================================

# Connection keep-alive settings based on client type
map $client_type $keepalive_timeout {
    default           "65";
    ~*bot-.*          "30";     # Shorter for bots
    ~*api-.*          "120";    # Longer for API clients
    ~*monitoring-.*   "300";    # Longest for monitoring tools
    ~*media-.*        "300";    # Long for media players
}

# Request timeout based on service type
map $server_name $request_timeout {
    default                              "60s";
    "~*^(ai|chat|ollama)\.7gram\.xyz$"   "300s";  # AI needs longer timeouts
    "~*^(emby|jellyfin|plex)\.7gram\.xyz$" "120s"; # Media streaming needs longer timeouts
    "~*^sync-.*\.7gram\.xyz$"            "600s";  # File sync needs very long timeouts
}

# ================================================
# USAGE INSTRUCTIONS
# ================================================

# To use these enhanced maps:
# 
# 1. Include this file in your /etc/nginx/nginx.conf in the http block:
#    http {
#        include /etc/nginx/includes/maps.conf;
#        include /etc/nginx/conf.d/*.conf;
#    }
# 
# 2. Remove any includes of maps.conf from server blocks
# 
# 3. Use the variables in your configurations:
#    - $connection_upgrade for WebSocket proxying
#    - $client_type for analytics and logging
#    - $should_log for conditional logging  
#    - $cache_control_header for optimized caching
#    - $content_security_policy for security headers
#    - $service_category and $auth_level for service management
#    - $service_priority for monitoring priorities
#    - $expected_resource_usage for resource monitoring
#    - $keepalive_timeout for connection optimization
#    - $request_timeout for service-specific timeouts

# ================================================
# ENHANCED BENEFITS OF THIS CONFIGURATION v3.0
# ================================================

# ✅ Modern client detection (2024 AI clients, browsers, tools)
# ✅ Enhanced security with updated CSP and headers
# ✅ IoT and embedded device detection
# ✅ AI service optimization mappings
# ✅ Performance-based connection settings
# ✅ Service priority and resource monitoring
# ✅ Enhanced bot and security scanner handling
# ✅ Modern image format optimization (WebP, AVIF)
# ✅ PWA and service worker optimization
# ✅ Smart TV and streaming device detection
# ✅ API client detection for modern tools
# ✅ Geographic detection ready (with enhanced regions)
# ✅ Service-specific timeout optimizations
# ✅ Resource usage expectations for monitoring