version: '3'

# Docker Compose for FREDDY - HTTPS & Authelia Optimized with SSL Certificate Generation
# Low power server handling core services: reverse proxy, auth, DNS, home automation

# Custom networks for secure service communication
networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16

volumes:
  # System volumes
  homeassistant_data:
  syncthing_data:

  # Monitoring and Management
  portainer_data:

  # Database volumes
  postgres_data:

  # Nextcloud volumes
  nextcloud_config:
  nextcloud_data:

  # Authelia and dependencies
  authelia_config:
  redis_data:

  # SWAG (Nginx with Certbot)
  swag_config:

services:
  # =============================================================================
  # REVERSE PROXY AND AUTH SERVICES
  # =============================================================================

  # swag - nginx reverse proxy with built-in certbot for SSL
  swag:
    image: lscr.io/linuxserver/swag:latest
    container_name: swag
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/Toronto}
      - URL=${DOMAIN:-example.com}  # Replace with your domain
      - SUBDOMAINS=wildcard  # Or list subdomains: nextcloud,photos,portainer,syncthing
      - VALIDATION=http  # Change to 'dns' if using DNS validation
      - EMAIL=${EMAIL:-your@email.com}  # For cert notifications
      - ONLY_SUBDOMAINS=false
      - STAGING=false  # Set to true for testing
    volumes:
      - swag_config:/config
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    networks:
      - frontend
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # redis - required for authelia sessions
  redis:
    image: redis:alpine
    container_name: redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # authelia - authentication server
  authelia:
    image: authelia/authelia:latest
    container_name: authelia
    depends_on:
      - redis
    volumes:
      - authelia_config:/config
    environment:
      - TZ=${TZ:-America/Toronto}
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget -O- --quiet --tries=1 http://localhost:9091/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # =============================================================================
  # SYSTEM SERVICES
  # =============================================================================

  # home assistant (requires host network for device discovery)
  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: homeassistant
    privileged: true
    network_mode: host  # Required for device discovery
    environment:
      - TZ=${TZ:-America/Toronto}
    volumes:
      # CONFIG: Git-managed configuration
      - ./config/homeassistant:/config
      # DATA: Application data and history  
      - homeassistant_data:/config/.storage
      # SYSTEM: Required for host access
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
      # USB devices for Zigbee/Z-Wave
      - /dev:/dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123/api/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # syncthing - file synchronization
  syncthing:
    image: lscr.io/linuxserver/syncthing:latest
    container_name: syncthing
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/Toronto}
    volumes:
      # CONFIG: Git-managed configuration
      - ./config/syncthing:/config
      # DATA: Application data
      - syncthing_data:/data
      # SYNC: Directories to sync
      - ${SYNCTHING_DATA_PATH:-/home/syncthing}:/sync
    ports:
      - "8384:8384"  # Web UI (can be removed if proxied via swag)
      - "22000:22000/tcp"  # File transfer
      - "22000:22000/udp"  # File transfer
      - "21027:21027/udp"  # Discovery
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8384/rest/system/status", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================

  # watchtower - automatic container updates (nginx excluded)
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    environment:
      - TZ=${TZ:-America/Toronto}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400
      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_REVIVE_STOPPED=false
      - WATCHTOWER_SCHEDULE=${WATCHTOWER_SCHEDULE:-0 2 * * *}
      - WATCHTOWER_NOTIFICATIONS=${WATCHTOWER_NOTIFICATIONS:-}
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL:-}
      - WATCHTOWER_MONITOR_ONLY=${WATCHTOWER_MONITOR_ONLY:-false}
      - WATCHTOWER_NOTIFICATIONS_LEVEL=info
      - WATCHTOWER_LABEL_ENABLE=true
    volumes:
      # SYSTEM: Required for Docker management
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - backend
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  # portainer - docker management ui
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    environment:
      - TZ=${TZ:-America/Toronto}
    volumes:
      # SYSTEM: Required for Docker management
      - /var/run/docker.sock:/var/run/docker.sock
      # DATA: Application data
      - portainer_data:/data
    ports:
      - "9000:9000"   # HTTP interface (can be removed if proxied via swag)
      - "9443:9443"   # HTTPS interface (if SSL enabled)
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/status", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Security enhancements
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================

  # postgres - database for nextcloud
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_DB=${NEXTCLOUD_DB_NAME:-nextcloud}
      - POSTGRES_USER=${NEXTCLOUD_DB_USER:-nextcloud}
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD:-changeme}
      - TZ=${TZ:-America/Toronto}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${NEXTCLOUD_DB_USER:-nextcloud}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # =============================================================================
  # PHOTO MANAGEMENT
  # =============================================================================

  # photostructure - photo management app (switched to bind mounts for better permission control)
  photostructure:
    image: photostructure/server:latest  # Consider :alpha for v2+ with simpler setup
    container_name: photostructure
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/Toronto}
    volumes:
      - ./config/photostructure/library:/ps/library
      - ./config/photostructure/config:/ps/config
      - ./config/photostructure/cache:/ps/tmp
      - ./config/photostructure/logs:/ps/logs
      - ${PHOTOS_PATH:-/mnt/1tb/photos}:/photos  # Mount your photo directory here
    # ports:  # Remove ports as swag will proxy
    #   - "1787:1787"
    restart: unless-stopped
    stop_grace_period: 2m
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1787/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # =============================================================================
  # CLOUD STORAGE
  # =============================================================================

  # nextcloud - file sharing with postgres db
  nextcloud:
    image: lscr.io/linuxserver/nextcloud:latest
    container_name: nextcloud
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/Toronto}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${NEXTCLOUD_DB_NAME:-nextcloud}
      - POSTGRES_USER=${NEXTCLOUD_DB_USER:-nextcloud}
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD:-changeme}
    volumes:
      - nextcloud_config:/config
      - /mnt/1tb/nextcloud/data:/data
    # ports:  # Remove ports as swag will proxy
    #   - "8443:443"
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost/status.php", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"